
||||IEEE 754 Floating-Point Standard||||

Since the mantissa is always 1.xxxxxxxxx in the normalised form, no need to represent the 
leading 1. So, effectively:

Single Precision: mantissa ===> 1 bit + 23 bits
Double Precision: mantissa ===> 1 bit + 52 bits
Since zero (0.0) has no leading 1, to distinguish it from others, it is given the reserved 
bitpattern all 0s for the exponent so that hardware won't attach a leading 1 to it. Thus:

Zero (0.0) = 0000...0000
Other numbers = -1S × (1 + Mantissa) × 2E
If we number the mantissa bits from left to right m1, m2, m3, ...

mantissa = m1 × 2-1 + m2 × 2-2 + m3 × 2-3 + ....

Negative exponents could pose a problem in comparisons.

With this representation, the first exponent shows a "larger" binary number, making direct 
comparison more difficult.

To avoid this, Biased Notation is used for exponents.

If the real exponent of a number is X then it is represented as (X + bias)

IEEE single-precision uses a bias of 127. Therefore, an exponent of

-1 is represented as -1 + 127 = 126 = 011111102
 0 is represented as  0 + 127 = 127 = 011111112
+1 is represented as +1 + 127 = 128 = 100000002
+5 is represented as +5 + 127 = 132 = 100001002


Floating Point Addition

Add the following two decimal numbers in scientific notation:

8.70 × 10-1 with 9.95 × 101

Rewrite the smaller number such that its exponent matches with the exponent of the larger number.
8.70 × 10-1 = 0.087 × 101

Add the mantissas
9.95 + 0.087 = 10.037 and write the sum 10.037 × 101

Put the result in Normalised Form
10.037 × 101 = 1.0037 × 102 (shift mantissa, adjust exponent)

check for overflow/underflow of the exponent after normalisation

Round the result
If the mantissa does not fit in the space reserved for it, it has to be rounded off.

For Example: If only 4 digits are allowed for mantissa

1.0037 × 102 ===> 1.004 × 102


Floating Point Numbers

Real Numbers: pi = 3.14159265... e = 2.71828...

Scientific Notation: has a single digit to the left of the decimal point.

A number in Scientific Notation with no leading 0s is called a Normalised Number: 
1.0 × 10-8

Not in normalised form: 0.1 × 10-7 or 10.0 × 10-9

Can also represent binary numbers in scientific notation: 1.0 × 2-3

Computer arithmetic that supports such numbers is called Floating Point.

The form is 1.xxxx… × 2yy…

Using normalised scientific notation

Simplifies the exchange of data that includes floating-point numbers
Simplifies the arithmetic algorithms to know that the numbers will always be in this form
Increases the accuracy of the numbers that can be stored in a word, since each unnecessary
leading 0 is replaced by another significant digit to the right of the decimal point

A Single-Precision floating-point number occupies 32-bits, so there is a compromise 
between the size of the mantissa and the size of the exponent.

These chosen sizes provide a range of approx:

± 10-38 ... 1038

Overflow
The exponent is too large to be represented in the Exponent field

Underflow
The number is too small to be represented in the Exponent field

To reduce the chances of underflow/overflow, can use 64-bit Double-Precision arithmetic

